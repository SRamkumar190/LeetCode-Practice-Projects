class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1};
        ans[0] = firstA(nums, target);
        ans[1] = lastA(nums, target);
        return ans;
    }

    // Find first occurrence
    public int firstA(int[] n, int t) {
        int start = 0, end = n.length - 1;
        int ans = -1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (n[mid] == t) {
                ans = mid;
                end = mid - 1; 
            } else if (n[mid] < t) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return ans;
    }

    // Find last occurrence
    public int lastA(int[] n, int t) {
        int start = 0, end = n.length - 1;
        int ans = -1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (n[mid] == t) {
                ans = mid;
                start = mid + 1;
            } else if (n[mid] < t) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return ans;
    }
} 
